Vue.component('vue-file-dragdrop', {
    props: {
        previewfile: {
            type: String,
            required: true
        },
        urlsend: {
            type: String,
            required: true
        },
        maintext: {
            type: String,
            required: true
        },
        deletetext: {
            type: String,
            required: true
        },
        sendtext: {
            type: String,
            required: true
        },
        continuetext: {
            type: String,
            required: true
        },
        maxfiles: {
            type: Number,
            required: true
        }
    },
    data: function () {
        return {
            dragAndDropCapable: false,
            files: [],
            uploadPercentage: 0,
            completemessage: '',
            send: 0
        }
    },
    computed: {
        showform: function() {
            var condicion = this.files.length < this.maxfiles;

            return condicion;
        }
    },
    methods: {
        /*
        Determines if the drag and drop functionality is in the
        window
        */
        determineDragAndDropCapable: function () {
            /*
            Create a test element to see if certain events
            are present that let us do drag and drop.
            */
            var div = document.createElement('div');
            var condicion;

            /*
            Check to see if the `draggable` event is in the element
            or the `ondragstart` and `ondrop` events are in the element. If
            they are, then we have what we need for dragging and dropping files.

            We also check to see if the window has `FormData` and `FileReader` objects
            present so we can do our AJAX uploading
            */
            condicion = (('draggable' in div) ||
            ('ondragstart' in div && 'ondrop' in div)) &&
            'FormData' in window && 'FileReader' in window;

            return condicion;
        },
        /*
        Gets the image preview for the file.
        */
        getImagePreviews: function () {
            /*
            Iterate over all of the files and generate an image preview for each one.
            */
            for (let i = 0; i < this.files.length; i++) {
                /*
                Ensure the file is an image file
                */
                if (/\.(jpe?g|png|gif)$/i.test(this.files[i].name)) {
                    /*
                    Create a new FileReader object
                    */
                    let reader = new FileReader();
                    
                    /*
                    Add an event listener for when the file has been loaded
                    to update the src on the file preview.
                    */
                    reader.addEventListener("load", function () {
                        this.$refs['preview' + parseInt(i)][0].src = reader.result;
                    }.bind(this), false);

                    /*
                    Read the data for the file in through the reader. When it has
                    been loaded, we listen to the event propagated and set the image
                    src to what was loaded from the reader.
                    */
                    reader.readAsDataURL(this.files[i]);
                } else {
                    /*
                    We do the next tick so the reference is bound and we can access it.
                    */
                    this.$nextTick(function () {
                        this.$refs['preview' + parseInt(i)][0].src = this.previewfile;
                    });
                }
            }
        },
        /*
        Submits the files to the server
        */
        submitFiles() {
            /*
            Initialize the form data
            */
            let formData = new FormData();
            let xupdatemessage = this.updateCompleteMessage;

            /* */
            this.send = 1;

            /*
            Iteate over any file sent over appending the files
            to the form data.
            */
            for (var i = 0; i < this.files.length; i++) {
                let file = this.files[i];

                formData.append('files[' + i + ']', file);
            }

            /*
            Make the request to the POST /file-drag-drop URL
            */
            axios.post(this.urlsend,
                formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    },
                    onUploadProgress: function (progressEvent) {
                        this.uploadPercentage = parseInt(Math.round((progressEvent.loaded * 100) / 
                        progressEvent.total));
                    }.bind(this)
                }
            ).then(function (response) {
                var message = (response.data.error !== '') ? response.data.error : response.data.info;

                xupdatemessage(message);
               //console.log(response.data);
            })
            .catch(function (error) {
                xupdatemessage(error);
            });
        },
        /*
        Removes a select file the user has uploaded
        */
        removeFile(key) {
            this.files.splice(key, 1);
        },
        updateCompleteMessage: function(text) {
            this.completemessage = text;
        },
        newUpload: function() {
            this.send = 0;
            this.uploadPercentage = 0;
            this.files = [];
            this.completemessage = '';
        }
    },
    mounted: function () {
        /*
        Determine if drag and drop functionality is capable in the browser
        */
        this.dragAndDropCapable = this.determineDragAndDropCapable();

        /*
        If drag and drop capable, then we continue to bind events to our elements.
        */
        if (this.dragAndDropCapable) {
            /*
            Listen to all of the drag events and bind an event listener to each
            for the fileform.
            */
            ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].
            forEach(function (evt) {
                /*
                For each event add an event listener that prevents the default action
                (opening the file in the browser) and stop the propagation of the event (so
                no other elements open the file in the browser)
                */
                this.$refs.fileform.addEventListener(evt, function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                }.bind(this), false);
            }.bind(this));
            
            /*
            Add an event listener for drop to the form
            */
            this.$refs.fileform.addEventListener('drop', function (e) {
                /*
                Capture the files from the drop event and add them to our local files
                array.
                */
                for (let i = 0; i < e.dataTransfer.files.length; i++) {
                    if (this.files.length >= this.maxfiles) break;

                    this.files.push(e.dataTransfer.files[i]);
                    this.getImagePreviews();
                }
            }.bind(this));
        }
    },
    template: '<div id="file-drag-drop">' +
    '<div v-show="send == 0">' +
    '<form ref="fileform" v-show="showform">' +
    '   <span class="drop-files">{{ maintext }}</span>' +
    '</form>' +
    'Max: {{ maxfiles }}' +
    '<div v-for="(file, key) in files" class="file-listing">' +
    '   <img class="preview" v-bind:ref="\'preview\' + parseInt( key )"/>' +
    '   <br>' +
    '   {{ file.name }}' +
    '   <div class="remove-container">' +
    '       <a class="remove" v-on:click="removeFile( key )">{{ deletetext }}</a>' +
    '   </div>' +
    '</div>' +
    '<a class="submit-button" v-on:click="submitFiles()" v-show="files.length > 0">{{ sendtext }}</a>' +
    '</div>' +
    '<progress max="100" v-bind:value.prop="uploadPercentage" v-show="uploadPercentage > 0"></progress>' +
    '<p>{{ completemessage }}</p>' + 
    '<a class="submit-button" v-on:click="newUpload()" v-show="send == 1">{{ continuetext }}</a>' +
    '</div>'
});